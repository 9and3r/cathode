apply plugin: 'android'
apply plugin: 'crashlytics'
apply plugin: 'checkstyle'
apply plugin: 'android-apt'

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.2'
  }
}

dependencies {
  compile project(':trakt-api')
  compile parent.ext.libraries.menudrawer
  compile parent.ext.libraries.messagebar
  compile parent.ext.libraries.schematic
  apt parent.ext.libraries.schematiccompiler

  compile parent.ext.libraries.gson

  compile parent.ext.libraries.supportv4

  compile parent.ext.libraries.otto
  compile parent.ext.libraries.dagger
  compile parent.ext.libraries.okhttp
  compile parent.ext.libraries.picasso
  compile parent.ext.libraries.retrofit
  compile parent.ext.libraries.tape

  compile parent.ext.libraries.butterknife
  compile parent.ext.libraries.timber

  compile parent.ext.libraries.dashclockApi

  compile parent.ext.libraries.crashlytics
}

android {
  compileSdkVersion parent.ext.compileSdkVersion
  buildToolsVersion parent.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion = parent.ext.minSdkVersion
    targetSdkVersion = parent.ext.targetSdkVersion

    versionCode = parent.ext.versionCode;
    versionName = parent.ext.versionName
  }

  signingConfigs {
    release
  }

  buildTypes {
    debug {
      buildConfigField "String", "PROVIDER_AUTHORITY", "\"net.simonvt.cathode.debug.provider.CathodeProvider\""
      packageNameSuffix ".debug"
    }
    release {
      buildConfigField "String", "PROVIDER_AUTHORITY", "\"net.simonvt.cathode.provider.CathodeProvider\""
      signingConfig signingConfigs.release
    }
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

apt {
  arguments {
    schematicOutPackage 'net.simonvt.cathode.provider.generated'
  }
}

checkstyle {
  configFile project.file('../config/checkstyle/checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  project.tasks.getByName("check").dependsOn checkstyle
}

if (project.hasProperty('cathodeStoreFile')) {
  android.signingConfigs.release.storeFile = file(cathodeStoreFile)
}
if (project.hasProperty('cathodeStorePassword')) {
  android.signingConfigs.release.storePassword = cathodeStorePassword
}
if (project.hasProperty('cathodeKeyPassword')) {
  android.signingConfigs.release.keyPassword = cathodeKeyPassword
}
if (project.hasProperty('cathodeKeyAlias')) {
  android.signingConfigs.release.keyAlias = cathodeKeyAlias
}
