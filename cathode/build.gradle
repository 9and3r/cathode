apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'
apply plugin: 'com.kageiit.lintrules'

dependencies {
  compile project(':cathode-common')
  compile project(':cathode-jobqueue')
  compile project(':cathode-provider')
  compile project(':cathode-settings')
  compile project(':cathode-sync')
  compile project(':trakt-api')
  compile project(':libs:colorpicker')
  compile project(':libs:datetimepicker')

  compile deps.schematic
  annotationProcessor deps.schematicCompiler

  compile deps.gson

  compile deps.appcompat
  compile deps.cardView
  compile deps.recyclerView
  compile deps.androidDesign

  compile deps.dagger
  annotationProcessor deps.daggerCompiler
  compile deps.picasso
  compile deps.picassoOkHttp
  compile deps.retrofit
  compile deps.okhttp
  debugCompile deps.okhttpLogger

  compile deps.butterknife
  annotationProcessor deps.butterknifeCompiler
  compile deps.timber

  compile deps.dashclockApi

  compile deps.tmdb

  compile(deps.crashlytics) {
    transitive = true
  }

  lintRules project(':cathode-lint')

  testCompile deps.junit
  testCompile deps.robolectric
  testCompile deps.truth
}

android {
  compileSdkVersion parent.ext.compileSdkVersion
  buildToolsVersion parent.ext.buildToolsVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  defaultConfig {
    minSdkVersion parent.ext.minSdkVersion
    targetSdkVersion parent.ext.targetSdkVersion

    versionCode = parent.ext.versionCode;
    versionName = parent.ext.versionName

    vectorDrawables.useSupportLibrary = true

    buildConfigField "String", "PROVIDER_AUTHORITY",
        "net.simonvt.cathode.provider.BuildConfig.PROVIDER_AUTHORITY"

    buildConfigField "String", "TRAKT_CLIENT_ID",
        "net.simonvt.cathode.sync.BuildConfig.TRAKT_CLIENT_ID"
    buildConfigField "String", "TRAKT_SECRET",
        "net.simonvt.cathode.sync.BuildConfig.TRAKT_SECRET"
    buildConfigField "String", "TRAKT_REDIRECT_URL",
        "net.simonvt.cathode.sync.BuildConfig.TRAKT_REDIRECT_URL"
    buildConfigField "String", "TMDB_API_KEY",
        "net.simonvt.cathode.sync.BuildConfig.TMDB_API_KEY"
  }

  signingConfigs {
    release
  }

  buildTypes {
    debug {
      buildConfigField "String", "AUTHORITY_DUMMY_CALENDAR",
          "\"net.simonvt.cathode.debug.calendar.DummyCalendarProvider\""
      resValue "string", "authority_dummy_calendar",
          "net.simonvt.cathode.debug.calendar.DummyCalendarProvider"

      applicationIdSuffix ".debug"

      ext.enableCrashlytics = false
    }
    release {
      buildConfigField "String", "AUTHORITY_DUMMY_CALENDAR",
          "\"net.simonvt.cathode.calendar.DummyCalendarProvider\""
      resValue "string", "authority_dummy_calendar",
          "net.simonvt.cathode.calendar.DummyCalendarProvider"

      signingConfig signingConfigs.release

      ext.enableCrashlytics = !isOnCI()
    }
  }

  dexOptions {
    preDexLibraries = !isOnCI()
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat = 'full'
  }
}

def isOnCI() {
  def ci = System.getenv('CI')
  return ci != null && ci == 'travis'
}

checkstyle {
  configFile project.file('../config/checkstyle/checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  project.tasks.getByName("check").dependsOn checkstyle
}

if (project.hasProperty('cathodeStoreFile')) {
  android.signingConfigs.release.storeFile = file(cathodeStoreFile)
}
if (project.hasProperty('cathodeStorePassword')) {
  android.signingConfigs.release.storePassword = cathodeStorePassword
}
if (project.hasProperty('cathodeKeyPassword')) {
  android.signingConfigs.release.keyPassword = cathodeKeyPassword
}
if (project.hasProperty('cathodeKeyAlias')) {
  android.signingConfigs.release.keyAlias = cathodeKeyAlias
}

if (isOnCI()) {
  printf 'Running on Travis-CI'
  android.signingConfigs.release.storeFile = android.signingConfigs.debug.storeFile
  android.signingConfigs.release.storePassword = android.signingConfigs.debug.storePassword
  android.signingConfigs.release.keyPassword = android.signingConfigs.debug.keyPassword
  android.signingConfigs.release.keyAlias = android.signingConfigs.debug.keyAlias
}

apply from: rootProject.file('deps.gradle')
