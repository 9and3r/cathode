import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'crashlytics'
apply plugin: 'checkstyle'
apply plugin: 'android-apt'

dependencies {
  compile project(':trakt-api')
  compile parent.libraries.messagebar
  compile parent.libraries.schematic
  apt parent.libraries.schematicCompiler

  compile parent.libraries.gson

  compile parent.libraries.appcompat
  compile parent.libraries.cardView
  compile parent.libraries.recyclerView

  compile parent.libraries.otto
  compile parent.libraries.dagger
  apt parent.libraries.daggerCompiler
  compile parent.libraries.picasso
  compile parent.libraries.retrofit
  compile parent.libraries.tape
  compile parent.libraries.okhttp
  compile parent.libraries.okhttpUrlConnection

  compile parent.libraries.butterknife
  compile parent.libraries.timber

  compile parent.libraries.dashclockApi

  compile parent.libraries.crashlytics
}

android {
  compileSdkVersion parent.ext.compileSdkVersion
  buildToolsVersion parent.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.minSdkVersion
    targetSdkVersion parent.ext.targetSdkVersion

    versionCode = parent.ext.versionCode;
    versionName = parent.ext.versionName

    buildConfigField "String", "BUILD_TIME", "\"" + buildTime() + "\""

    buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + getPropertiesField('trakt.clientId') + "\""
    buildConfigField "String", "TRAKT_SECRET", "\"" + getPropertiesField('trakt.secret') + "\""
    buildConfigField "String", "TRAKT_REDIRECT_URL",
        "\"" + getPropertiesField('trakt.redirectUrl') + "\""
  }

  signingConfigs {
    release
  }

  buildTypes {
    debug {
      buildConfigField "String", "PROVIDER_AUTHORITY",
          "\"net.simonvt.cathode.debug.provider.CathodeProvider\""
      applicationIdSuffix ".debug"
    }
    release {
      buildConfigField "String", "PROVIDER_AUTHORITY",
          "\"net.simonvt.cathode.provider.CathodeProvider\""
      signingConfig signingConfigs.release
    }
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
  }
}

def buildTime() {
  def date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  date.setTimeZone(TimeZone.getTimeZone("UTC"))
  return date.format(new Date())
}

apt {
  arguments {
    schematicOutPackage 'net.simonvt.cathode.provider.generated'
  }
}

checkstyle {
  configFile project.file('../config/checkstyle/checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  project.tasks.getByName("check").dependsOn checkstyle
}

if (project.hasProperty('cathodeStoreFile')) {
  android.signingConfigs.release.storeFile = file(cathodeStoreFile)
}
if (project.hasProperty('cathodeStorePassword')) {
  android.signingConfigs.release.storePassword = cathodeStorePassword
}
if (project.hasProperty('cathodeKeyPassword')) {
  android.signingConfigs.release.keyPassword = cathodeKeyPassword
}
if (project.hasProperty('cathodeKeyAlias')) {
  android.signingConfigs.release.keyAlias = cathodeKeyAlias
}
