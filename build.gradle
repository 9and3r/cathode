buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:0.13.+'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
  }
}

allprojects {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
  }
}

ext {
  versionMajor = 2
  versionMinor = 0
  versionPatch = 0
  versionBuild = 0

  versionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
  versionName = versionMajor + "." + versionMinor + "." + versionPatch

  minSdkVersion = 16
  targetSdkVersion = 21

  compileSdkVersion = 21
  buildToolsVersion = '21.0.1'
}

ext.libraries = [
    menudrawer: 'net.simonvt.menudrawer:menudrawer:3.0.6',
    messagebar: 'net.simonvt.messagebar:messagebar:1.0.2',
    schematic: 'net.simonvt.schematic:schematic:0.5.3',
    schematicCompiler: 'net.simonvt.schematic:schematic-compiler:0.5.3',

    gson: 'com.google.code.gson:gson:2.3',

    supportv4: 'com.android.support:support-v4:21.0.0',
    cardView: 'com.android.support:cardview-v7:21.0.0',
    recyclerView: 'com.android.support:recyclerview-v7:21.0.0',

    dagger: 'com.squareup.dagger:dagger:1.2.1',
    daggerCompiler: 'com.squareup.dagger:dagger-compiler:1.2.1',
    okhttp: 'com.squareup.okhttp:okhttp:2.0.0',
    okhttpUrlConnection: 'com.squareup.okhttp:okhttp-urlconnection:2.0.0',
    otto: 'com.squareup:otto:1.3.5',
    picasso: 'com.squareup.picasso:picasso:2.3.2',
    retrofit: 'com.squareup.retrofit:retrofit:1.7.0',
    tape: 'com.squareup:tape:1.2.3',

    butterknife: 'com.jakewharton:butterknife:5.1.1',
    timber: 'com.jakewharton.timber:timber:2.4.1',

    dashclockApi: 'com.google.android.apps.dashclock:dashclock-api:2.0.0',

    crashlytics: 'com.crashlytics.android:crashlytics:1.+'
]

def getPropertiesField(String field) {
  def rootDir = project.rootDir
  def localProperties = new File(rootDir, "local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def clientId = properties.getProperty(field)
    return clientId
  }

  return ""
}
